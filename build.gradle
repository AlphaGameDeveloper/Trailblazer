plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'dev.alphagame'

// version is latest tag
// get latest git tag
def stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'describe', '--tags', '--abbrev=0'
    standardOutput = stdout
}
def version = stdout.toString().trim()

java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    // Add any dependencies your logger might use, e.g., SLF4J, Log4j
}

publishing {
    repositories {
        // üîê GitHub Packages
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/AlphaGameDeveloper/Trailblazer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }

        // üåê GitHub Pages (static Maven repo)
        maven {
            name = "GitHubPages"
            url = layout.buildDirectory.dir("repo").get().asFile.toURI()
        }
        
        // local reposilite (releases)
        maven {
            name = "Reposilite"
            url = uri("https://maven.alphagame.dev/releases")
            credentials {
                username = project.findProperty("reposilite.user") ?: System.getenv("REPOSILITE_USER")
                password = project.findProperty("reposilite.key") ?: System.getenv("REPOSILITE_PASSWORD")
            }
        }

        // local reposilite (snapshots)
        maven {
            name = "ReposiliteSnapshots"
            url = uri("https://maven.alphagame.dev/snapshots")
            credentials {
                username = project.findProperty("reposilite.user") ?: System.getenv("REPOSILITE_USER")
                password = project.findProperty("reposilite.key") ?: System.getenv("REPOSILITE_PASSWORD")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from components.java
            groupId = group
            artifactId = 'trailblazer'
            version = version
        }

        snapshot(MavenPublication) {
            from components.java
            groupId = group
            artifactId = 'trailblazer'
            version = determineSnapshotVersion()
        }
    }
}

// Create a wrapper task to publish to GitHub Pages repo
tasks.register("publishToPages") {
    dependsOn "publishGprPublicationToGitHubPagesRepository"
}

// Copy build/repo into root maven-repo/ directory
tasks.register("copyMavenToPages", Copy) {
    dependsOn "publishToPages"
    from "${buildDir}/repo"
    into "${rootDir}/maven-repo"
}

// Task to publish snapshot releases to Reposilite
tasks.register("publishSnapshotToReposilite") {
    dependsOn "publishSnapshotPublicationToReposiliteSnapshotsRepository"
}

// Helper function to determine the version dynamically
def determineSnapshotVersion() {
    def gitCommitId = 'unknown'
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        gitCommitId = stdout.toString().trim()
    } catch (Exception ignored) {
        // Fallback to 'unknown' if Git is unavailable
    }
    // get latest tag id
    def stdoutTag = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0'
        standardOutput = stdoutTag
    }
    def latestTag = stdoutTag.toString().trim()
    return "${latestTag}-${gitCommitId}-SNAPSHOT"
}