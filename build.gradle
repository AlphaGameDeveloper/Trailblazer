plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'dev.alphagame'

// version is latest tag
// get latest git tag
version = System.getenv("SNAPSHOT") ? determineSnapshotVersion() : getTag()
println("Version: ${version}")
java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.json:json:20210307'
}

publishing {
    repositories {
        // 🔐 GitHub Packages
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/AlphaGameDeveloper/Trailblazer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }

        // 🌐 GitHub Pages (static Maven repo)
        maven {
            name = "GitHubPages"
            url = layout.buildDirectory.dir("repo").get().asFile.toURI()
        }
        
        // local reposilite (releases)
        maven {
            name = "Reposilite"
            url = uri("https://maven.alphagame.dev/releases")
            credentials {
                username = project.findProperty("reposilite.user") ?: System.getenv("REPOSILITE_USER")
                password = project.findProperty("reposilite.key") ?: System.getenv("REPOSILITE_PASSWORD")
            }
        }

        // local reposilite (snapshots)
        maven {
            name = "ReposiliteSnapshots"
            url = uri("https://maven.alphagame.dev/snapshots")
            credentials {
                username = project.findProperty("reposilite.user") ?: System.getenv("REPOSILITE_USER")
                password = project.findProperty("reposilite.key") ?: System.getenv("REPOSILITE_PASSWORD")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from components.java
            groupId = group
            artifactId = 'trailblazer'
            version = version
        }

        snapshot(MavenPublication) {
            from components.java
            groupId = group
            artifactId = 'trailblazer'
            version = determineSnapshotVersion()
        }
    }
}

// Create a wrapper task to publish to GitHub Pages repo
tasks.register("publishToPages") {
    dependsOn "publishGprPublicationToGitHubPagesRepository"
}

// Copy build/repo into root maven-repo/ directory
tasks.register("copyMavenToPages", Copy) {
    dependsOn "publishToPages"
    from "${buildDir}/repo"
    into "${rootDir}/maven-repo"
}

// Task to publish snapshot releases to Reposilite
tasks.register("publishSnapshotToReposilite") {
    dependsOn "publishSnapshotPublicationToReposiliteSnapshotsRepository"
}

// Helper function to determine the version dynamically
def getTag() {
    def latestTag = System.getenv("GIT_TAG") ?: 'unknown'
    try {
        if (exec { commandLine 'git', '--version' }.exitValue == 0) {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short', 'HEAD'
                standardOutput = stdout
            }
            gitCommitId = stdout.toString().trim()

            def stdoutTag = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags', '--abbrev=0'
                standardOutput = stdoutTag
            }
            latestTag = stdoutTag.toString().trim()
        }
    } catch (Exception ignored) {
        // Fallback to environment variable if Git is unavailable
    }
    return latestTag
}

def determineSnapshotVersion() {
    def gitCommitId = 'unknown'
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        gitCommitId = stdout.toString().trim()
    } catch (Exception ignored) {
        // If Git command fails, try to use GITHUB_SHA environment variable
        def githubSha = System.getenv("GITHUB_SHA")
        if (githubSha) {
            // Take just the first 7 characters to match Git's short format
            gitCommitId = githubSha.substring(0, Math.min(7, githubSha.length()))
        }
        // If both methods fail, use 'unknown'
    }
    
    def latestTag = getTag()
    return "${latestTag}-${gitCommitId}-SNAPSHOT"
}

def getVersionString() {
    return System.getenv("SNAPSHOT") ? determineSnapshotVersion() : getTag()
}

tasks.register("showVersion") {
    doLast {
        println "Current version: ${version}"
        println "Snapshot version: ${determineSnapshotVersion()}"
    }
}

tasks.javadoc {
    include("dev/alphagame/trailblazer/**")
    
    // Prepare version string before configuring options
    def displayVersion = version.toString()
    if (displayVersion == "false" || displayVersion == "null" || displayVersion == "undefined") {
        displayVersion = determineSnapshotVersion()
    }
    
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        links("https://docs.oracle.com/en/java/javase/17/docs/api/")
        
        // Explicitly set version information with safety checks
        windowTitle = "Trailblazer API ${displayVersion}"
        docTitle = "Trailblazer API Documentation (${displayVersion})"
        bottom = "Version: ${displayVersion} | &copy; ${new Date().format('yyyy')} Damien Boisvert (AlphaGameDeveloper)"
        
        // Add a header with version information
        header = "Trailblazer ${displayVersion}"
    }
    doLast {
        def versionedDir = file("${buildDir}/docs/javadoc/${displayVersion}")
        copy {
            from destinationDir
            into versionedDir
        }
    }
}

// Task to copy Javadoc for SNAPSHOT versions
tasks.register("copySnapshotJavadoc") {
    dependsOn "javadoc"
    doLast {
        def snapshotDir = file("${buildDir}/docs/javadoc/SNAPSHOT")
        snapshotDir.mkdirs()
        
        def snapshotVersion = determineSnapshotVersion()
        
        // Copy the generated Javadoc, but update the version information
        copy {
            from tasks.javadoc.destinationDir
            into snapshotDir
            
            // Try to update any HTML files that might contain the version info
            filter { line ->
                line.replace('unknown version', snapshotVersion)
                    .replace('Unknown Version', "Snapshot ${snapshotVersion}")
                    .replace('version unknown', "version ${snapshotVersion}")
            }
        }
        
        file("${snapshotDir}/version.txt").text = "Snapshot version: ${snapshotVersion}\nGenerated on: ${new Date()}"
        
        println "Snapshot Javadoc copied to: ${snapshotDir}"
        println "Generated for version: ${snapshotVersion}"
    }
}